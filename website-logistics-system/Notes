//this is my code for map if user choose place greater than 400 killo

function calculateDistance() {
    if (!markerPickup || !markerDropoff) {
        console.log("Please select both pickup and drop-off locations.");
        return;
    }
    const request = {
        origin: markerPickup.getPosition(),
        destination: markerDropoff.getPosition(),
        travelMode: google.maps.TravelMode.DRIVING
    };
    directionsService.route(request, function (response, status) {
        if (status === 'OK') {
            const route = response.routes[0];
            const distance = route.legs[0].distance.value / 1000; // Distance in kilometers
            console.log("Distance: " + distance + " km");
            document.getElementById('distanceOutput').innerText = "Distance: " + distance + " km"; // Update the text element in the form
            
            // Check if the distance is greater than 100 kilometers
            if (distance > 400) {
                // Display a warning message to the user
                document.getElementById('dateRestriction').innerText = "Drop-off date must be at least two days ahead when distance is greater than 100 km.";
            } else {
                // If the distance is less than 100 kilometers, remove the message
                document.getElementById('dateRestriction').innerText = "";
            }
        } else {
            console.error('Failed to get route due to ' + status);
        }
    });
}

// Function to handle drop-off date selection 
function handleDropoffDate() {
    const pickupDate = new Date(document.getElementById('pickupDate').value);
    const dropoffDate = new Date(document.getElementById('dropoffDate').value);
    const timeDifference = dropoffDate.getTime() - pickupDate.getTime();
    const dayDifference = timeDifference / (1000 * 3600 * 24);

    if (dayDifference < 2) {
        document.getElementById('dropoffDate').value = ""; // Clear the drop-off date value
        document.getElementById('dateWarning').innerText = "Please select a drop-off date at least two days after the pickup date."; // Show a message under the drop-off date field
    } else {
        document.getElementById('dateWarning').innerText = ""; // Remove the message
    }
}

// اكواد الباك حق التسجيل

const express = require('express');
const mysql = require('mysql');
const bodyParser = require('body-parser');

const app = express();

// Create connection
const db = mysql.createConnection({
  host     : '127.0.0.1',
  user     : 'root',
  password : 'root',
  database : 'loginandsignup'
});

// Connect
db.connect((err) => {
  if(err){
      throw err;
  }
  console.log('MySQL Connected...');
});

// Static routing
app.use("/", express.static("./website"));

// HTML routing
app.use(bodyParser.urlencoded({ extended: false }));

// Sign-up form submission handling
app.post("/signup", (request, response) => {
  const { UserName, Email, Password, ConfirmPassword } = request.body;

  // Validate form data
  if (!UserName || !Email || !Password || !ConfirmPassword) {
    return response.status(400).send("All fields are required.");
  }

  if (Password !== ConfirmPassword) {
    return response.status(400).send("Passwords do not match.");
  }

  // Create SQL insert query
  const sql = `INSERT INTO Users (UserName, Email, Password) VALUES (?, ?, ?)`;
  const values = [UserName, Email, Password];

  // Insert new user into database
  db.query(sql, values, (err, result) => {
    if (err) {
      console.error(err);
      return response.status(500).send("An error occurred while saving the user.");
    }
    response.send("Sign-up successful! You can now login.");
  });
});

// Login form submission handling
app.post("/login", (request, response) => {
  const { UserName, Password } = request.body;

  // Validate form data
  if (!UserName || !Password) {
    return response.status(400).send("Username and password are required.");
  }

  // Check if user exists in the database
  const sql = `SELECT * FROM Users WHERE UserName = ? AND Password = ?`;
  const values = [UserName, Password];
  
  db.query(sql, values, (err, results) => {
    if (err) {
      console.error(err);
      return response.status(500).send("An error occurred while logging in.");
    }

    if (results.length === 0) {
      return response.status(401).send("Invalid username or password.");
    }

    response.send("Login successful!");
  });
});

// JSON routing
app.use(express.json());

// Server
const port = 9000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
 //7568f661f67d9263806587c50d2887162569f65b









 //This for Raghad 

//<span class="formClose" id="formClose" onclick="deleteForm(event)">&times;</span> //Close Button

//Where any additional shipment will be added 

//<Section id="AddForm" class="AddForm"></Section> 

// document.getElementById("formClose").addEventListener("click", deleteForm);

// function deleteForm(event) {
//     var deleteButton = event.target;
//     var parentForm = deleteButton.closest("div");
  
//     parentForm.remove();
// }

//  // Event delegation to handle delete button clicks
//  document.addEventListener('click', function(event) {
//     if (event.target && event.target.className === 'formClose') {
//         deleteForm(event);
//     }
// });


// for table 

CREATE TABLE users (
  
  username VARCHAR(255) UNIQUE,
  email VARCHAR(255) UNIQUE,
  password VARCHAR(255)
);


CREATE TABLE order_details (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  pickup_location VARCHAR(255) NOT NULL,
  dropoff_location VARCHAR(255) NOT NULL,
  pickup_date DATE NOT NULL,
  dropoff_date DATE NOT NULL,
  cargo_type VARCHAR(255) NOT NULL,
  truck_type VARCHAR(255) NOT NULL,
  number_of_trucks INT NOT NULL,
  goods_value DECIMAL(10, 2),
  image_path VARCHAR(255),
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE users (
  username VARCHAR(255) PRIMARY KEY,
  email VARCHAR(255) UNIQUE,
  password VARCHAR(255)
);

CREATE TABLE order_details (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  pickup_location VARCHAR(255) NOT NULL,
  dropoff_location VARCHAR(255) NOT NULL,
  pickup_date DATE NOT NULL,
  dropoff_date DATE NOT NULL,
  cargo_type VARCHAR(255) NOT NULL,
  truck_type VARCHAR(255) NOT NULL,
  number_of_trucks INT NOT NULL,
  goods_value DECIMAL(10, 2),
  image_path VARCHAR(255),
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  email VARCHAR(255),
  FOREIGN KEY (email) REFERENCES users(email)
);