//this is my code for map if user choose place greater than 400 killo

function calculateDistance() {
    if (!markerPickup || !markerDropoff) {
        console.log("Please select both pickup and drop-off locations.");
        return;
    }
    const request = {
        origin: markerPickup.getPosition(),
        destination: markerDropoff.getPosition(),
        travelMode: google.maps.TravelMode.DRIVING
    };
    directionsService.route(request, function (response, status) {
        if (status === 'OK') {
            const route = response.routes[0];
            const distance = route.legs[0].distance.value / 1000; // Distance in kilometers
            console.log("Distance: " + distance + " km");
            document.getElementById('distanceOutput').innerText = "Distance: " + distance + " km"; // Update the text element in the form
            
            // Check if the distance is greater than 100 kilometers
            if (distance > 400) {
                // Display a warning message to the user
                document.getElementById('dateRestriction').innerText = "Drop-off date must be at least two days ahead when distance is greater than 100 km.";
            } else {
                // If the distance is less than 100 kilometers, remove the message
                document.getElementById('dateRestriction').innerText = "";
            }
        } else {
            console.error('Failed to get route due to ' + status);
        }
    });
}

// Function to handle drop-off date selection 
function handleDropoffDate() {
    const pickupDate = new Date(document.getElementById('pickupDate').value);
    const dropoffDate = new Date(document.getElementById('dropoffDate').value);
    const timeDifference = dropoffDate.getTime() - pickupDate.getTime();
    const dayDifference = timeDifference / (1000 * 3600 * 24);

    if (dayDifference < 2) {
        document.getElementById('dropoffDate').value = ""; // Clear the drop-off date value
        document.getElementById('dateWarning').innerText = "Please select a drop-off date at least two days after the pickup date."; // Show a message under the drop-off date field
    } else {
        document.getElementById('dateWarning').innerText = ""; // Remove the message
    }
}

// اكواد الباك حق التسجيل

const express = require('express');
const mysql = require('mysql');
const bodyParser = require('body-parser');

const app = express();

// Create connection
const db = mysql.createConnection({
  host     : '127.0.0.1',
  user     : 'root',
  password : 'root',
  database : 'loginandsignup'
});

// Connect
db.connect((err) => {
  if(err){
      throw err;
  }
  console.log('MySQL Connected...');
});

// Static routing
app.use("/", express.static("./website"));

// HTML routing
app.use(bodyParser.urlencoded({ extended: false }));

// Sign-up form submission handling
app.post("/signup", (request, response) => {
  const { UserName, Email, Password, ConfirmPassword } = request.body;

  // Validate form data
  if (!UserName || !Email || !Password || !ConfirmPassword) {
    return response.status(400).send("All fields are required.");
  }

  if (Password !== ConfirmPassword) {
    return response.status(400).send("Passwords do not match.");
  }

  // Create SQL insert query
  const sql = `INSERT INTO Users (UserName, Email, Password) VALUES (?, ?, ?)`;
  const values = [UserName, Email, Password];

  // Insert new user into database
  db.query(sql, values, (err, result) => {
    if (err) {
      console.error(err);
      return response.status(500).send("An error occurred while saving the user.");
    }
    response.send("Sign-up successful! You can now login.");
  });
});

// Login form submission handling
app.post("/login", (request, response) => {
  const { UserName, Password } = request.body;

  // Validate form data
  if (!UserName || !Password) {
    return response.status(400).send("Username and password are required.");
  }

  // Check if user exists in the database
  const sql = `SELECT * FROM Users WHERE UserName = ? AND Password = ?`;
  const values = [UserName, Password];
  
  db.query(sql, values, (err, results) => {
    if (err) {
      console.error(err);
      return response.status(500).send("An error occurred while logging in.");
    }

    if (results.length === 0) {
      return response.status(401).send("Invalid username or password.");
    }

    response.send("Login successful!");
  });
});

// JSON routing
app.use(express.json());

// Server
const port = 9000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
 //7568f661f67d9263806587c50d2887162569f65b









 //This for Raghad 

//<span class="formClose" id="formClose" onclick="deleteForm(event)">&times;</span> //Close Button

//Where any additional shipment will be added 

//<Section id="AddForm" class="AddForm"></Section> 

// document.getElementById("formClose").addEventListener("click", deleteForm);

// function deleteForm(event) {
//     var deleteButton = event.target;
//     var parentForm = deleteButton.closest("div");
  
//     parentForm.remove();
// }

//  // Event delegation to handle delete button clicks
//  document.addEventListener('click', function(event) {
//     if (event.target && event.target.className === 'formClose') {
//         deleteForm(event);
//     }
// });



CREATE TABLE users (
  email VARCHAR(255) PRIMARY KEY,
  username VARCHAR(255),
  password VARCHAR(255)
);

CREATE TABLE trader (
  idNumber varchar(10) PRIMARY KEY,
  companyName varchar(255) NOT NULL,
  companyEmail varchar(255) NOT NULL,
  companyAddress varchar(255) NOT NULL,
  citySelect varchar(255) NOT NULL,
  companyZip varchar(5) NOT NULL,
  companyVat varchar(15) NOT NULL,
  companyLicense varchar(10) NOT NULL,
  commercialRegistrationFile1 blob,
  traderName varchar(255) NOT NULL,
  traderPhoneNumber varchar(10) NOT NULL,
  traderAddress varchar(255) NOT NULL,
  industrySelect varchar(255) NOT NULL,
  traderIDFile blob,
  email VARCHAR(255),
  FOREIGN KEY (email) REFERENCES users(email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE transportationcompany (
  commercialRegistrationID varchar(10) PRIMARY KEY,
  commercialRegistrationName varchar(255) DEFAULT NULL,
  commercialRegistrationNumber varchar(10) DEFAULT NULL,
  issueDate date DEFAULT NULL,
  expirationDate date DEFAULT NULL,
  licenseType enum('Directing goods transport vehicles License','Transporting goods on land roads license','Land freight broker license') DEFAULT NULL,
  licenseNumber varchar(10) DEFAULT NULL,
  transportType enum('Transporting goods','Transporting goods between cities') DEFAULT NULL,
  companySpecialization enum('General Freight Shipping services','Express Delivery Services','Specialized Transportation Services','Distribution and Inventory Management Services','Livestock Transportation services','Oversized Cargo Transportation services','Efficient Parcel and Small Cargo Transportation services','Hazardous Materials Transportation services','Perishable Goods Transportation services','Waste Management and Recycling Transportation Services','Auto Transportation services') DEFAULT NULL,
  commercialRegistrationFile blob,
  ownerIdFile blob,
  licenseFile blob,
  commissionerIdFile blob,
  email VARCHAR(255),
  FOREIGN KEY (email) REFERENCES users(email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



CREATE TABLE `order` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pickup` varchar(255) NOT NULL,
  `dropOff` varchar(255) NOT NULL,
  `datePickUp` date NOT NULL,
  `dateDropOff` date NOT NULL,
  `typeCargo` varchar(255) NOT NULL,
  `truck` varchar(255) NOT NULL,
  `numberOfTruck` varchar(255) NOT NULL,
  `CargoValue` decimal(10,2) NOT NULL,
  `weight` decimal(10,2) NOT NULL,
  `image` varchar(255) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  idNumber VARCHAR(10),
  username VARCHAR(255),
  FOREIGN KEY (idNumber) REFERENCES trader(idNumber),
  FOREIGN KEY (username) REFERENCES users(username),
  PRIMARY KEY (`id`)
);

CREATE TABLE truck (
  truckID INT AUTO_INCREMENT PRIMARY KEY,
  Owner VARCHAR(255) NOT NULL,
  OwnerID INT NOT NULL,
  formOwnerIDFile VARCHAR(255) NOT NULL,
  user VARCHAR(255) DEFAULT NULL,
  userID INT DEFAULT 0,
  formUserIDFile VARCHAR(255) DEFAULT NULL,
  LicensePlate VARCHAR(255) NOT NULL,
  VehicleChassis VARCHAR(255) NOT NULL,
  RegistrationType VARCHAR(255) NOT NULL,
  VehicleBrand VARCHAR(255) NOT NULL,
  VehicleModel VARCHAR(255) NOT NULL,
  Colour VARCHAR(255) NOT NULL,
  ManufactureYear INT NOT NULL,
  Serial_number VARCHAR(255) NOT NULL,
  insurance_start DATE NOT NULL,
  insurance_end DATE NOT NULL,
  inspection_start DATE NOT NULL,
  inspection_end DATE NOT NULL,
  formVehicleRegistrationFile VARCHAR(255) NOT NULL,
  formVehiclePhotoFile VARCHAR(255) NOT NULL,
  username VARCHAR(255),
  FOREIGN KEY (username) REFERENCES users(username),
  FOREIGN KEY (commercialRegistrationID) REFERENCES transportationcompany(commercialRegistrationID)
);

















-- Create the users table with username as the primary key and email as unique
CREATE TABLE users (
  username VARCHAR(255) PRIMARY KEY,
  email VARCHAR(255) UNIQUE,
  password VARCHAR(255)
);

-- Create the trader table with email as a foreign key referencing users(email)
CREATE TABLE trader (
  idNumber varchar(10) NOT NULL PRIMARY KEY,
  companyName varchar(255) NOT NULL,
  companyEmail varchar(255) NOT NULL,
  companyAddress varchar(255) NOT NULL,
  citySelect varchar(255) NOT NULL,
  companyZip varchar(5) NOT NULL,
  companyVat varchar(15) NOT NULL,
  companyLicense varchar(10) NOT NULL,
  commercialRegistrationFile1 blob,
  traderName varchar(255) NOT NULL,
  traderPhoneNumber varchar(10) NOT NULL,
  traderAddress varchar(255) NOT NULL,
  industrySelect varchar(255) NOT NULL,
  traderIDFile blob,
  username VARCHAR(255),
  FOREIGN KEY (username) REFERENCES users(username)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Create the transportationcompany table with email as a foreign key referencing users(email)
CREATE TABLE transportationcompany (
  commercialRegistrationID varchar(10) PRIMARY KEY,
  commercialRegistrationName varchar(255) DEFAULT NULL,
  commercialRegistrationNumber varchar(10) DEFAULT NULL,
  issueDate date DEFAULT NULL,
  expirationDate date DEFAULT NULL,
  licenseType enum('Directing goods transport vehicles License','Transporting goods on land roads license','Land freight broker license') DEFAULT NULL,
  licenseNumber varchar(10) DEFAULT NULL,
  transportType enum('Transporting goods','Transporting goods between cities') DEFAULT NULL,
  companySpecialization enum('General Freight Shipping services','Express Delivery Services','Specialized Transportation Services','Distribution and Inventory Management Services','Livestock Transportation services','Oversized Cargo Transportation services','Efficient Parcel and Small Cargo Transportation services','Hazardous Materials Transportation services','Perishable Goods Transportation services','Waste Management and Recycling Transportation Services','Auto Transportation services') DEFAULT NULL,
  commercialRegistrationFile blob,
  ownerIdFile blob,
  licenseFile blob,
  commissionerIdFile blob,
  username VARCHAR(255),
  FOREIGN KEY (username) REFERENCES users(username)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE order_details (
  order_id INT AUTO_INCREMENT PRIMARY KEY,
  pickup_location VARCHAR(255) NOT NULL,
  dropoff_location VARCHAR(255) NOT NULL,
  pickup_date DATE NOT NULL,
  dropoff_date DATE NOT NULL,
  cargo_type VARCHAR(255) NOT NULL,
  truck_type VARCHAR(255) NOT NULL,
  number_of_trucks INT NOT NULL,
  goods_value DECIMAL(10, 2),
  image_path VARCHAR(255),
 weight DECIMAL NOT NULL,
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  idNumber VARCHAR(10),
  username VARCHAR(255),
  FOREIGN KEY (idNumber) REFERENCES trader(idNumber),
  FOREIGN KEY (username) REFERENCES users(username)
);
CREATE TABLE truck (
  truckID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Owner varchar(255) NOT NULL,
  OwnerID int(11) NOT NULL,
  formOwnerIDFile varchar(255) NOT NULL,
  user varchar(255) DEFAULT NULL,
  userID int(11) DEFAULT '0',
  formUserIDFile varchar(255) DEFAULT NULL,
  LicensePlate varchar(255) NOT NULL,
  VehicleChassis varchar(255) NOT NULL,
  RegistrationType varchar(255) NOT NULL,
  VehicleBrand varchar(255) NOT NULL,
  VehicleModel varchar(255) NOT NULL,
  Colour varchar(255) NOT NULL,
  ManufactureYear int(11) NOT NULL,
  Serial_number varchar(255) NOT NULL,
  insurance_start date NOT NULL,
  insurance_end date NOT NULL,
  inspection_start date NOT NULL,
  inspection_end date NOT NULL,
  formVehicleRegistrationFile varchar(255) NOT NULL,
  formVehiclePhotoFile varchar(255) NOT NULL,
  username varchar(255) DEFAULT NULL,
  commercialRegistrationID varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


 <form method="post" action="/signup" class="sign-up-form" id="signup">
            <h2 class="title">Sign Up</h2>
            <div class="input-field">
                <i class="fas fa-user"></i>
                <input type="text" placeholder="Username"  name="UserName"/>
            </div>
            <div class="error-message" id="signup-username-error-message"></div> <!-- Display error message here -->


            <div class="input-field">
                <i class="fas fa-envelope"></i>
                <input type="email" placeholder="Email" name="Email" />
            </div>
            <div class="error-message" id="signup-email-error-message"></div> <!-- Display error message here -->
            <div class="input-field">
                <i class="fas fa-lock"></i>
             
                <input type="password" placeholder="Password" name="Password" />
            </div>
            <div class="input-field">
                <i class="fas fa-lock"></i>
                <input type="password" placeholder="Confirm Password" name="ConfirmPassword" />
            </div>
            <div class="error-message" id="signup-password-error-message"></div> <!-- Display error message here -->
            <input type="submit" value="SignUp" id="sign-up-btn" class="btn solid" href="../index.html"/></a>
            <p class="already-have-account">If you already have an account, please
                <a type="submit" value="Login" id="sign-in-btn2" class="btn-link" >Login</a>
            </p>
        </form>

//JAVA SCRIPT  CODE 

document.addEventListener("DOMContentLoaded", function () {
    const signInBtn = document.querySelector("#sign-in-btn");
    const signUpBtn = document.querySelector("#sign-up-btn");
    const signInBtn2 = document.querySelector("#sign-in-btn2");
    const container = document.querySelector(".container");

    signInBtn.addEventListener("click", () => {
        container.classList.remove("sign-up-mode");
    });

    signUpBtn.addEventListener("click", () => {
        container.classList.add("sign-up-mode");
    });

    signInBtn2.addEventListener("click", () => {
        container.classList.remove("sign-up-mode");
    });

    // Get the forms
    const signInForm = document.querySelector(".sign-in-form");
    const signUpForm = document.querySelector(".sign-up-form");

    // Add validation to both forms
    signInForm.addEventListener("submit", (event) => {
        event.preventDefault(); // Prevent default form submission
        validateForm(signInForm);
    });

    signUpForm.addEventListener("submit", (event) => {
        event.preventDefault(); // Prevent default form submission
        validateForm(signUpForm);
    });


    function validateForm(form) {
        const usernameInput = form.querySelector("input[type='text']");
        const passwordInput = form.querySelector("input[type='password']");
        const emailInput = form.querySelector("input[type='email']"); // For sign-up form
        const confirmPasswordInput = form.querySelector("input[type='password'][placeholder='Confirm Password']"); // For sign-up form

        let isValid = true;

        // Username validation
        const usernameError = validateUsername(usernameInput.value);
        if (usernameError) {
            showError(usernameInput, usernameError, usernameInput.parentElement);
            isValid = false;
        } else {
            removeError(usernameInput, usernameInput.parentElement);
        }

        // Password validation
        if (form === signInForm) {
            // Password validation for sign-in form
            const passwordError = validatePasswordSignIn(passwordInput.value);
            if (passwordError) {
                showError(passwordInput, passwordError, passwordInput.parentElement);
                isValid = false;
            } else {
                removeError(passwordInput, passwordInput.parentElement);
            }
        } else if (form === signUpForm) {
            // Password validation for sign-up form
            const passwordError = validatePasswordSignUp(passwordInput.value);
            if (passwordError) {
                showError(passwordInput, passwordError, passwordInput.parentElement);
                isValid = false;
            } else {
                removeError(passwordInput, passwordInput.parentElement);
            }
        }

        // Email validation (for sign-up form)
        if (form === signUpForm) {
            const emailError = validateEmail(emailInput.value);
            if (emailError) {
                showError(emailInput, emailError, emailInput.parentElement);
                isValid = false;
            } else {
                removeError(emailInput, emailInput.parentElement);
            }
        }

        // Confirm password validation (for sign-up form)
        if (form === signUpForm) {
            const confirmPasswordError = validateConfirmPassword(passwordInput.value, confirmPasswordInput.value);
            if (confirmPasswordError) {
                showError(confirmPasswordInput, confirmPasswordError, confirmPasswordInput.parentElement);
                isValid = false;
            } else {
                removeError(confirmPasswordInput, confirmPasswordInput.parentElement);
            }
        }

        if (isValid) {
            // Form is valid, submit it
            form.submit();
        }
    }

    function validateUsername(username) {
        if (username.trim() === "") {
            return "Username cannot be empty.";
        } else if (username.length < 6) {
            return "Username must be at least 6 characters long.";
        } else {
            return ""; // Valid username
        }
    }

    function validatePasswordSignIn(password) {
        if (password.trim() === "") {
            return "Password cannot be empty.";
        } else {
            return ""; // Valid password for sign-in
        }
    }

    function validatePasswordSignUp(password) {
        if (password.trim() === "") {
            return "Password cannot be empty.";
        } else if (password.length < 8) {
            return "Password must be at least 8 characters long.";
        } else if (!hasNumber(password)) {
            return "Password must contain at least one number.";
        } else if (!hasSpecialChar(password)) {
            return "Password must contain at least one special character.";
        } else {
            return ""; // Valid password for sign-up
        }
    }

    function hasNumber(str) {
        return /\d/.test(str);
    }

    function hasSpecialChar(str) {
        return /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(str);
    }

    function validateEmail(email) {
        if (email.trim() === "") {
            return "Email cannot be empty.";
        } else if (!validateEmailFormat(email)) {
            return "Please enter a valid email address.";
        } else {
            return ""; // Valid email
        }
    }

    function validateEmailFormat(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    function validateConfirmPassword(password, confirmPassword) {
        if (confirmPassword.trim() === "") {
            return "Confirm password cannot be empty.";
        } else if (confirmPassword !== password) {
            return "Passwords do not match.";
        } else {
            return ""; // Valid confirmation
        }
    }

    function showError(input, message, parentElement) {
        const errorContainer = parentElement.querySelector(".error-message");
        if (!errorContainer) {
            const error = document.createElement("p");
            error.classList.add("error-message");
            error.textContent = message;
            parentElement.insertBefore(error, input.nextSibling);
        } else {
            errorContainer.textContent = message;
        }
        input.classList.add("error");
    }

    function removeError(input, parentElement) {
        const errorContainer = parentElement.querySelector(".error-message");
        if (errorContainer) {
            errorContainer.remove();
        }
        input.classList.remove("error");
    }
    
});





